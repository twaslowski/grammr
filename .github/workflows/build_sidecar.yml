# Note: This is just a utility workflow to build sidecar images; it is not meant to be run directly.
name: Build sidecar image

on:
  workflow_call:
    inputs:
      image_name:
        required: true
        type: string
      directory:
        required: true
        type: string
      build_args:
        required: false
        type: string
        description: "Additional build arguments in JSON format, e.g. '{\"ARG1\": \"value1\", \"ARG2\": \"value2\"}'"
    secrets:
      DOCKERHUB_USERNAME:
          required: true
      DOCKERHUB_TOKEN:
          required: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        working-directory: ${{ inputs.directory }}
        run: poetry install --all-groups --no-root

      - name: Run tests
        env:
          PYTHONPATH: .
        working-directory: ${{ inputs.directory }}
        run: poetry run pytest test/

  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      exists: ${{ steps.check-image.outputs.exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Derive and store version
        id: version
        working-directory: ${{ inputs.directory }}
        run: |
          echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT

      - name: Check if image already exists
        id: check-image
        shell: bash
        run: |
          IMAGE="${{ inputs.image_name }}:${{ steps.version.outputs.version }}"
          if docker manifest inspect $IMAGE &>/dev/null; then
            echo "Image already exists, skipping build"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, will build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build_sidecar:
    needs: [ prepare, test ]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.exists != 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Parse build args
        id: build-args
        shell: bash
        run: |
          BUILD_ARGS=""
          if [ -n "${{ inputs.build_args }}" ]; then
            # Parse JSON and convert to build-args format
            BUILD_ARGS=$(echo '${{ inputs.build_args }}' | jq -r 'to_entries | map("--build-arg " + .key + "=" + .value) | join(" ")')
          fi
          echo "args=$BUILD_ARGS" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.directory }}
          file:  ${{ inputs.directory }}/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ inputs.image_name }}:${{ needs.prepare.outputs.version }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ steps.build-args.outputs.args }}
