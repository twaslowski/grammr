name: Build and deploy serverless sidecars

on:
  push:
    branches: [main]
    paths:
      - 'environments/*/morphology.values.yaml'
      - 'sidecars/morphology/**'
      - 'terraform/**'
      - '.github/workflows/deploy_serverless.yaml'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      morphology-version: ${{ steps.version.outputs.morphology-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Derive and store version
        id: version
        run: |
          echo "morphology-version=$(cd ./sidecars/morphology && poetry version -s)" >> $GITHUB_OUTPUT

  create-shared-resources:
    needs: [ prepare ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246770851643:role/github-actions
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.1

      - name: Deploy Terraform
        working-directory: terraform/shared
        env:
          TF_VAR_tailscale_auth_key: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          terraform init -backend-config=config/shared.hcl
          terraform apply -auto-approve

  build-morphology:
    needs: [ create-shared-resources, prepare ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - code: "ru"
            model: "ru_core_news_lg"
          - code: "de"
            model: "de_core_news_lg"
          - code: "en"
            model: "en_core_web_lg"
          - code: "it"
            model: "it_core_news_lg"
          - code: "es"
            model: "es_core_news_lg"
          - code: "pt"
            model: "pt_core_news_lg"
          - code: "fr"
            model: "fr_core_news_lg"
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246770851643:role/github-actions
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if image already exists
        id: check-image
        shell: bash
        run: |
          IMAGE_TAG="246770851643.dkr.ecr.eu-central-1.amazonaws.com/morphology:${{ needs.prepare.outputs.morphology-version }}-${{ matrix.code }}"
          if docker manifest inspect $IMAGE_TAG &>/dev/null; then
            echo "Image already exists, skipping build"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist, will build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        if: steps.check-image.outputs.exists != 'true'
        with:
          # required for ECR, see: https://github.com/serverless/serverless/issues/12808
          provenance: false
          context: sidecars/morphology/
          file: sidecars/morphology/docker/lambda.Dockerfile
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          tags: 246770851643.dkr.ecr.eu-central-1.amazonaws.com/morphology:${{ needs.prepare.outputs.version }}-${{ matrix.code }}
          build-args: |
            SPACY_MODEL=${{ matrix.model }}

  deploy-dev:
    needs: [ prepare, build-morphology ]
    runs-on: ubuntu-latest
    env:
      TF_VAR_environment: "dev"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246770851643:role/github-actions
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.1

      - name: Deploy Terraform
        working-directory: terraform/application
        run: |
          terraform init -backend-config=config/dev.hcl
          terraform apply -auto-approve -var-file=config/dev.tfvars

  deploy-prod:
    needs: [ deploy-dev, prepare ]
    runs-on: ubuntu-latest
    env:
      TF_VAR_environment: "prod"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::246770851643:role/github-actions
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.1

      - name: Deploy Terraform
        working-directory: terraform/application
        run: |
          terraform init -backend-config=config/prod.hcl
          terraform apply -auto-approve -var-file=config/prod.tfvars